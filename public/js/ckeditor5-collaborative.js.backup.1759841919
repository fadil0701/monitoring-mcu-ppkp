// ============================================================================
// COLLABORATIVE DOCUMENT EDITOR ONLY - NO CLASSIC FALLBACK
// ============================================================================
console.log('CKEditor 5 Collaborative Document Editor loaded');

// Global variables
var ckEditorInstances = {};
var ckEditorToolbarContainers = {};

// Load CKEditor 5 from CDN
function loadCKEditorFromCDN() {
    if (window.DecoupledEditor) {
        console.log('[CDN] DecoupledEditor already loaded');
        return Promise.resolve();
    }
    
    return new Promise(function(resolve, reject) {
        console.log('[CDN] Loading CKEditor 5 Decoupled Document from CDN...');
        
        var script = document.createElement('script');
        script.src = 'https://cdn.ckeditor.com/ckeditor5/39.0.2/decoupled-document/ckeditor.js';
        script.async = true;
        
        script.onload = function() {
            console.log('[CDN] ✅ CKEditor 5 loaded successfully from CDN');
            
            if (window.DecoupledEditor) {
                console.log('[CDN] ✅ DecoupledEditor available');
                resolve();
            } else {
                console.error('[CDN] ❌ DecoupledEditor not available after load!');
                reject(new Error('DecoupledEditor not available'));
            }
        };
        
        script.onerror = function(error) {
            console.error('[CDN] ❌ Failed to load CKEditor 5 from CDN:', error);
            reject(error);
        };
        
        document.head.appendChild(script);
        console.log('[CDN] Script tag added to head');
    });
}

// Initialize Collaborative Editor ONLY
function initCollaborativeEditor(editorId, buildType, config) {
    console.log('Initializing Collaborative Editor ONLY:', editorId);
    
    var textarea = document.getElementById(editorId);
    var editorContainer = document.getElementById(editorId + '-editor');
    var toolbarContainer = document.getElementById(editorId + '-toolbar');
    
    if (!textarea || !editorContainer) {
        console.error('Required elements not found:', {
            textarea: !!textarea,
            editorContainer: !!editorContainer
        });
        return;
    }
    
    if (!toolbarContainer) {
        console.error('Toolbar container not found for Collaborative Editor!');
        console.error('Collaborative Editor REQUIRES separate toolbar container');
        return;
    }
    
    // Load CKEditor 5 first
    loadCKEditorFromCDN().then(function() {
        createCollaborativeEditor(editorId, editorContainer, toolbarContainer, textarea, config);
    }).catch(function(error) {
        console.error('Failed to load CKEditor 5:', error);
        showError(editorContainer, 'Failed to load editor. Please refresh the page.');
    });
}

// Create Collaborative Editor
function createCollaborativeEditor(editorId, editorContainer, toolbarContainer, textarea, config) {
    console.log('Creating Collaborative Editor...');
    
    // Enhanced config for collaborative document editing
    var collaborativeConfig = {
        toolbar: {
            items: [
                'heading',
                '|',
                'bold', 'italic', 'underline', 'strikethrough',
                '|',
                'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor',
                '|',
                'alignment',
                '|',
                'numberedList', 'bulletedList', 'outdent', 'indent',
                '|',
                'link', 'insertTable', 'blockQuote', 'codeBlock',
                '|',
                'horizontalLine', 'specialCharacters',
                '|',
                'undo', 'redo'
            ]
        },
        language: 'en',
        placeholder: 'Start writing your collaborative document...'
    };
    
    // Merge with custom config
    if (config) {
        collaborativeConfig = Object.assign(collaborativeConfig, config);
    }
    
    // Create the editor
    DecoupledEditor.create(editorContainer, collaborativeConfig)
        .then(function(editor) {
            console.log('✅ Collaborative Editor created successfully');
            
            // Mount the toolbar
            toolbarContainer.appendChild(editor.ui.view.toolbar.element);
            console.log('✅ Toolbar mounted to container');
            
            // Store instances
            ckEditorInstances[editorId] = editor;
            ckEditorToolbarContainers[editorId] = toolbarContainer;
            
            // Set initial data
            editor.setData(textarea.value || '');
            console.log('✅ Initial data set');
            
            // Data change listener
            editor.model.document.on('change:data', function() {
                var data = editor.getData();
                textarea.value = data;
                
                // Trigger change events
                textarea.dispatchEvent(new Event('input', { bubbles: true }));
                textarea.dispatchEvent(new Event('change', { bubbles: true }));
                
                console.log('Editor data synced:', data.length, 'chars');
            });
            
            // Form submission handlers
            var form = textarea.closest('form');
            if (form) {
                form.addEventListener('submit', function(e) {
                    textarea.value = editor.getData();
                    console.log('Form submit - data synced:', textarea.value.length, 'chars');
                });
            }
            
            // Save button click handler
            document.addEventListener('click', function(e) {
                var target = e.target;
                
                if (target.matches('button[type="submit"]') || 
                    target.closest('button[type="submit"]') ||
                    target.matches('[wire\\:click*="save"]') ||
                    target.closest('[wire\\:click*="save"]')) {
                    
                    setTimeout(function() {
                        textarea.value = editor.getData();
                        console.log('Save button - data synced:', textarea.value.length, 'chars');
                    }, 50);
                }
            }, true);
            
            // Livewire re-mount handler
            if (typeof Livewire !== 'undefined') {
                Livewire.hook('message.processed', function(message, component) {
                    console.log('Livewire message processed, checking toolbar...');
                    setTimeout(function() {
                        remountToolbarIfNeeded(editorId);
                    }, 100);
                });
            }
            
            console.log('✅ Collaborative Editor fully initialized');
        })
        .catch(function(error) {
            console.error('❌ Failed to create Collaborative Editor:', error);
            showError(editorContainer, 'Failed to initialize editor. Please refresh the page.');
        });
}

// Re-mount toolbar if needed
function remountToolbarIfNeeded(editorId) {
    var toolbarContainer = ckEditorToolbarContainers[editorId];
    var editorInstance = ckEditorInstances[editorId];
    
    if (!toolbarContainer || !editorInstance) {
        console.log('Toolbar or editor instance not found for remounting');
        return;
    }
    
    // Check if toolbar is already mounted
    if (toolbarContainer.children.length > 0) {
        console.log('Toolbar already mounted for:', editorId);
        return;
    }
    
    // Re-mount toolbar
    try {
        if (editorInstance.ui && editorInstance.ui.view && editorInstance.ui.view.toolbar && editorInstance.ui.view.toolbar.element) {
            toolbarContainer.appendChild(editorInstance.ui.view.toolbar.element);
            console.log('✅ Toolbar re-mounted successfully for:', editorId);
        }
    } catch (error) {
        console.error('Failed to re-mount toolbar:', error);
    }
}

// Show error message
function showError(container, message) {
    container.innerHTML = '<div style="padding: 20px; border: 2px dashed #ff6b6b; background: #fff5f5; color: #c53030; border-radius: 8px; text-align: center;"><strong>Editor Error:</strong><br>' + message + '</div>';
}

// Global functions for compatibility
window.initializeCKEditor5 = function(editorId, buildType, config) {
    console.log('Global initializeCKEditor5 called - using Collaborative Editor');
    initCollaborativeEditor(editorId, buildType, config);
};

window.initializeCKEditor5WithPersistentToolbar = function(editorId, buildType, config) {
    console.log('Global initializeCKEditor5WithPersistentToolbar called - using Collaborative Editor');
    initCollaborativeEditor(editorId, buildType, config);
};

console.log('✅ CKEditor 5 Collaborative Document Editor ready (DecoupledEditor only)');
