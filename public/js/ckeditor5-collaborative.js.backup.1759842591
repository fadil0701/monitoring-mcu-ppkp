// ============================================================================
// FEATURE RICH EDITOR - ULTIMATE SYNC (6 MECHANISMS)
// ============================================================================
console.log('CKEditor 5 Feature Rich Editor loaded');

// Global variables
var ckEditorInstances = {};
var ultimateSyncActive = false;

// Load CKEditor 5 Feature Rich from CDN
function loadCKEditorFromCDN() {
    if (window.FeatureRichEditor) {
        console.log('[CDN] FeatureRichEditor already loaded');
        return Promise.resolve();
    }
    
    return new Promise(function(resolve, reject) {
        console.log('[CDN] Loading CKEditor 5 Feature Rich from CDN...');
        
        var script = document.createElement('script');
        script.src = 'https://cdn.ckeditor.com/ckeditor5/39.0.2/feature-rich/ckeditor.js';
        script.async = true;
        
        script.onload = function() {
            console.log('[CDN] ‚úÖ CKEditor 5 Feature Rich loaded successfully');
            resolve();
        };
        
        script.onerror = function(error) {
            console.error('[CDN] ‚ùå Failed to load CKEditor 5 Feature Rich:', error);
            reject(error);
        };
        
        document.head.appendChild(script);
    });
}

// Initialize Feature Rich Editor with ULTIMATE sync
function initFeatureRichEditor(editorId, buildType, config) {
    console.log('Initializing Feature Rich Editor:', editorId);
    
    var textarea = document.getElementById(editorId);
    var editorContainer = document.getElementById(editorId + '-editor');
    
    if (!textarea || !editorContainer) {
        console.error('Required elements not found');
        return;
    }
    
    // Load CKEditor 5 Feature Rich
    loadCKEditorFromCDN().then(function() {
        createFeatureRichEditor(editorId, editorContainer, textarea, config);
    }).catch(function(error) {
        console.error('Failed to load CKEditor 5 Feature Rich:', error);
    });
}

// Create Feature Rich Editor with ULTIMATE sync mechanisms
function createFeatureRichEditor(editorId, editorContainer, textarea, config) {
    console.log('Creating Feature Rich Editor...');
    
    var editorConfig = {
        toolbar: {
            items: [
                'heading', '|',
                'bold', 'italic', 'underline', 'strikethrough', '|',
                'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', '|',
                'alignment', '|',
                'numberedList', 'bulletedList', 'outdent', 'indent', '|',
                'link', 'insertTable', 'blockQuote', 'codeBlock', '|',
                'imageUpload', 'mediaEmbed', '|',
                'horizontalLine', 'specialCharacters', '|',
                'undo', 'redo', '|',
                'findAndReplace', 'selectAll'
            ]
        },
        language: 'en',
        image: {
            toolbar: [
                'imageTextAlternative',
                'imageStyle:full',
                'imageStyle:side',
                'imageStyle:alignLeft',
                'imageStyle:alignCenter',
                'imageStyle:alignRight'
            ]
        },
        table: {
            contentToolbar: [
                'tableColumn',
                'tableRow',
                'mergeTableCells',
                'tableProperties',
                'tableCellProperties'
            ]
        }
    };
    
    if (config) {
        editorConfig = Object.assign(editorConfig, config);
    }
    
    FeatureRichEditor.create(editorContainer, editorConfig)
        .then(function(editor) {
            console.log('‚úÖ Feature Rich Editor created');
            
            // Store instance
            ckEditorInstances[editorId] = editor;
            
            // Set initial data
            editor.setData(textarea.value || '');
            
            // ============================================================================
            // 6 SYNC MECHANISMS - GUARANTEED DATA SYNC
            // ============================================================================
            
            // MECHANISM 1: Real-time sync (on every change)
            editor.model.document.on('change:data', function() {
                var data = editor.getData();
                textarea.value = data;
                
                // Trigger ALL possible events
                textarea.dispatchEvent(new Event('input', { bubbles: true }));
                textarea.dispatchEvent(new Event('change', { bubbles: true }));
                textarea.dispatchEvent(new Event('blur', { bubbles: true }));
                
                console.log('üîÑ MECHANISM 1 - REAL-TIME SYNC:', data.length, 'chars');
            });
            
            // MECHANISM 2: Form submit sync
            var form = textarea.closest('form');
            if (form) {
                form.addEventListener('submit', function(e) {
                    var data = editor.getData();
                    textarea.value = data;
                    console.log('üíæ MECHANISM 2 - FORM SUBMIT SYNC:', data.length, 'chars');
                }, true);
            }
            
            // MECHANISM 3: Save button click sync
            document.addEventListener('click', function(e) {
                var target = e.target;
                
                if (target.matches('button[type="submit"]') || 
                    target.closest('button[type="submit"]') ||
                    target.matches('[wire\\:click*="save"]') ||
                    target.closest('[wire\\:click*="save"]') ||
                    (target.matches('button') && target.textContent.toLowerCase().includes('save'))) {
                    
                    console.log('üíæ MECHANISM 3 - SAVE BUTTON CLICKED');
                    
                    setTimeout(function() {
                        var data = editor.getData();
                        textarea.value = data;
                        
                        // Force trigger events
                        textarea.dispatchEvent(new Event('input', { bubbles: true }));
                        textarea.dispatchEvent(new Event('change', { bubbles: true }));
                        
                        console.log('üíæ MECHANISM 3 - SAVE BUTTON SYNC:', data.length, 'chars');
                    }, 10);
                }
            }, true);
            
            // MECHANISM 4: Interval sync (every 1 second when focused)
            setInterval(function() {
                if (document.activeElement && document.activeElement.closest('.ck-editor')) {
                    var data = editor.getData();
                    if (textarea.value !== data) {
                        textarea.value = data;
                        textarea.dispatchEvent(new Event('input', { bubbles: true }));
                        console.log('üîÑ MECHANISM 4 - INTERVAL SYNC:', data.length, 'chars');
                    }
                }
            }, 1000);
            
            // MECHANISM 5: Focus/blur sync
            editor.editing.view.document.on('blur', function() {
                var data = editor.getData();
                textarea.value = data;
                textarea.dispatchEvent(new Event('change', { bubbles: true }));
                console.log('üîÑ MECHANISM 5 - BLUR SYNC:', data.length, 'chars');
            });
            
            // MECHANISM 6: Livewire sync
            if (typeof Livewire !== 'undefined') {
                Livewire.hook('message.processed', function(message, component) {
                    var data = editor.getData();
                    textarea.value = data;
                    console.log('üîÑ MECHANISM 6 - LIVEWIRE SYNC:', data.length, 'chars');
                });
            }
            
            ultimateSyncActive = true;
            console.log('‚úÖ FEATURE RICH EDITOR ACTIVE - 6 sync mechanisms installed');
            console.log('üéØ Data sync is now GUARANTEED!');
        })
        .catch(function(error) {
            console.error('‚ùå Failed to create Feature Rich Editor:', error);
        });
}

// Global functions
window.initializeCKEditor5 = function(editorId, buildType, config) {
    console.log('Global initializeCKEditor5 - Feature Rich version');
    initFeatureRichEditor(editorId, buildType, config);
};

window.initializeCKEditor5WithPersistentToolbar = function(editorId, buildType, config) {
    console.log('Global initializeCKEditor5WithPersistentToolbar - Feature Rich version');
    initFeatureRichEditor(editorId, buildType, config);
};

console.log('‚úÖ CKEditor 5 Feature Rich Editor ready - 6 sync mechanisms active');
